#!/home/chad/anaconda/bin/python
import	numpy as np
import	matplotlib.pyplot as plt
import	sys
import	caffe
import	time
import	os
import	glob
import	pickle
import	threading

class caffeExec:
	def	__init__(self):
		# Make sure that caffe is on the python path:
		self.caffe_root	='/home/chad/caffe/'  # this file is expected to be in {caffe_root}/examples

		pcnn_MODEL_FILE	=self.caffe_root+'/models/placesCNN/places205CNN_deploy.prototxt'
		pcnn_PRETRAINED	=self.caffe_root+'/models/placesCNN/places205CNN_iter_300000.caffemodel'
		pcnn_length		=205
		hcnn_MODEL_FILE	=self.caffe_root+'/models/hybridCNN/hybridCNN_deploy.prototxt'
		hcnn_PRETRAINED	=self.caffe_root+'/models/hybridCNN/hybridCNN_iter_700000.caffemodel'
		hcnn_length		=1183

		self.models				={'placesCNN':{'model':pcnn_MODEL_FILE, 'pretrained':pcnn_PRETRAINED, 'len':pcnn_length},
								  'hybridCNN':{'model':hcnn_MODEL_FILE, 'pretrained':hcnn_PRETRAINED, 'len':hcnn_length}}
		
	def	setup(self,model):
		# Set the right path to your model definition file, pretrained model weights,
		# and the image you would like to classify.
		MODEL_FILE	=self.models[model]['model']
		PRETRAINED	=self.models[model]['pretrained']
		self.cnnlen	=self.models[model]['len']
		
		numpymean	=np.load(self.caffe_root + 'python/caffe/imagenet/ilsvrc_2012_mean.npy').mean(1).mean(1)
		caffe.set_mode_cpu()
		self.net 		=caffe.Classifier(MODEL_FILE, PRETRAINED, mean=numpymean, channel_swap=(2,1,0), raw_scale=255, image_dims=(256, 256))

	def	predictMongoDB(self,images,db):
		output	=open(filename,'w')
		for i,image in enumerate(images):
			print i,image['image_location']
			try:
				caffeImages	=[caffe.io.load_image(image['image_location']) ]
				prediction	=self.net.predict(caffeImages)
	
				cnnx	=map(list,prediction)[0]
				image['prediction']	=cnnx

		output.close()

	def	predictPrint(self,images,N,filename):
		output	=open(filename,'w')
		frmt	='%8.5f '*2+'%10i '+'%8e '*self.cnnlen
		frmte	='%8.5f '*2+'%10i '
		for i,image in enumerate(images):
			print i,image['image_location']
			coords	=map(float,[image['latitude'],image['longitude']])
			imnum	=[int(image['imagenumber'])]
			try:
				caffeImages	=[caffe.io.load_image(image['image_location']) ]
				prediction	=self.net.predict(caffeImages)
	
				cnnx	=map(list,prediction)[0]
				datum	=tuple(coords+imnum+cnnx)
				print>>output,frmt%datum
			except:
				datum	=tuple(coords+imnum)
				print>>output,frmte%datum

		output.close()

	def	predict(self,images,N):
		segments	=zip(*[iter(images)]*N)
		if len(images)%N:
			segments.append(tuple(images[len(segments)*N:]))

		self.predictions	=[]
		for segment in segments:
			caffeImages	=[caffe.io.load_image(x) for x in segment]
			prediction	=self.net.predict(caffeImages)
			self.predictions.append(prediction)

		self.predictions	=np.vstack(self.predictions)
		self.images			=images
	
	def	printPredictions(self,filename):
		print self.predictions.shape
		np.savetxt(filename,self.predictions)
	
	def	savePredictionData(self,filename):
		np.save(filename,self.predictions)

def	readCSV(filename,start,stop):
	lines	=open(filename).readlines()
	header	=lines[0].split()
	images	=[dict(zip(header,line.split())) for line in lines[start:stop]]

	return	images

class	myThread(threading.Thread):
	def	__init__(self,threadID,name,counter,images,outfilename):
		threading.Thread.__init__(self)
		self.threadID	=threadID
		self.name		=name
		self.counter	=counter
		self.images		=images
		self.outfile	=outfilename

	def	run(self):
		co		=caffeExec()
		co.setup('placesCNN')
		co.predictPrint(self.images,1,self.outfile)
		
#images	=glob.glob('/home/chad/projects/geo/images/*.jpg')
#images	=[x.split()+['/home/chad/projects/geo/images/'+x.split()[3].split('/')[-1]] for x in open('test2.csv').readlines()]
#images	=[x.split()[3] for x in open('europe2.csv').readlines()[:10]]
start	=1
stop	=50000
half	=(stop-start)/2
images	=readCSV('europe2.csv',start,stop)
thread1	=myThread(1,'thread1',1,images[:half],'output_1.csv')
thread2	=myThread(2,'thread2',2,images[half:],'output_2.csv')

thread1.start()
thread2.start()

#co		=caffeExec()
#co.setup('placesCNN')
#co.predictPrint(images,1,'test2hcnn.csv')

