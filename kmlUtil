#!/home/chad/anaconda/bin/python

import	numpy as np
import	matplotlib.pyplot as plt
import	sys
import	urllib2
import	urllib
import	json
from	pymongo import MongoClient
from	shapely.geometry	import	Polygon
from	shapely.geometry	import	Point

class	countryMesh:
	def	__init__(self):
		self.boundaries	={}
		self.meshInside	=[]
		self.meshTiles	=[]
		self.boundariesSimp	={}
		return
	
	def	readKML(self,kmlfilename):
		coordfile	=open(kmlfilename).read()
		
		sections	=coordfile.split('<coordinates>')
		sections	=[q.split('</coordinates>')[0].split() for q in sections[1:]]
		
		bound		=[]
		for i,section in enumerate(sections):
			sec	=[map(float,q.split(',')) for q in section]
			ces	=zip(*sec)
			bound.extend(sec)
		
			polygon			=Polygon(sec)
			self.boundaries[i]	={'points':sec,'coords':ces,'polygon':polygon}
	
	def	getAllGrids(self,digits):
		N	=len(self.boundaries.keys())
		for k,bb in enumerate(self.boundaries.keys()):
			boundsize	=len(self.boundaries[bb]['points'])
			sys.stdout.flush()
			self.getGrid(bb,digits)

	def	getGrid(self,bb,digits):
		minlat	=np.round(min(self.boundaries[bb]['coords'][0]),digits)
		maxlat	=np.round(max(self.boundaries[bb]['coords'][0]),digits)
		minlon	=np.round(min(self.boundaries[bb]['coords'][1]),digits)
		maxlon	=np.round(max(self.boundaries[bb]['coords'][1]),digits)
	
		res		=np.power(10.0,-digits)
		buf		=res*(0.5)
		lats	=np.arange(minlat,maxlat,res)
		lons	=np.arange(minlon,maxlon,res)

		mlats,mlons	=np.meshgrid(lats,lons)
		mlen	=np.prod(mlats.shape)
		mlats	=np.reshape(mlats,(1,mlen))
		mlons	=np.reshape(mlons,(1,mlen))
	
		inside	=[]
		outside	=[]
		polygon	=self.boundaries[bb]['polygon']
		pch		=polygon.convex_hull
		psimp	=polygon.simplify(0.1).buffer(0.1)
		self.boundariesSimp[bb]	=psimp
		frmt	=' '*20+'%f\r'
		for k,mt,mn in zip(range(mlen),mlats[0],mlons[0]):
			#inout	=polygon.contains(Point(mt,mn))
			#inout	=pch.contains(Point(mt,mn))
			inout	=psimp.contains(Point(mt,mn))
			if inout:
				inside.append([mt,mn])
			else:
				outside.append([mt,mn])
			sys.stdout.flush()
		
		#if len(inside)>0:
		#	self.meshInside.extend(inside)
		if len(inside)==0:
			x,y	=polygon.centroid.xy
			mt	=np.round(x[0],digits)
			mn	=np.round(y[0],digits)
			inside.append([mt,mn])
			self.meshInside.extend(inside)
		else:
			self.meshInside.extend(inside)

		for ins in inside:
			lowerleft	=[ins[0]-buf,ins[1]-buf]
			upperright	=[ins[0]+buf,ins[1]+buf]
			centroid	=[ins[0]    ,ins[1]    ]
			tile	={'lowerleft':lowerleft, 'upperright':upperright,'centroid':centroid}
			self.meshTiles.append(tile)
			
		return	{'inside':zip(*inside),'outside':zip(*outside)}
		
	def	plotMap(self):
		for bi in self.boundaries:
			b	=self.boundaries[bi]
			plt.plot(b['coords'][0],b['coords'][1])
		latlon	=zip(*self.meshInside)
		plt.plot(latlon[0],latlon[1],'k+')
		plt.show()
	
	def	plotTiles(self):
		for bi in self.boundaries:
			b	=self.boundaries[bi]
			plt.plot(b['coords'][0],b['coords'][1])

			b	=self.boundariesSimp[bi]
			x,y	=b.exterior.coords.xy
			plt.plot(x,y)
		for t in self.meshTiles:
			ll	=t['lowerleft']
			ur	=t['upperright']
			eps	=(ur[0]-ll[0])*0.1
			square0	=[ll[0]+eps,ll[0]+eps,ur[0]-eps,ur[0]-eps,ll[0]+eps]
			square1	=[ll[1]+eps,ur[1]-eps,ur[1]-eps,ll[1]+eps,ll[1]+eps]
			#plt.plot([ll[0],ur[0]],[ll[1],ur[1]],'k')
			plt.plot(square0,square1,'k')
		plt.show()

	def	getTiles(self):
		return	self.meshTiles
		
a	=countryMesh()
kmlfilename	=sys.argv[1]
a.readKML(kmlfilename)
a.getAllGrids(1)
#a.plotMap()
a.plotTiles()
